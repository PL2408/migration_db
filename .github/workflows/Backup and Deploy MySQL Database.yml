name: Backup and Deploy MySQL Database

on:
  workflow_dispatch:

jobs:
  TG-Start-Notification:
    runs-on: self-hosted
    steps:
      - name: Send telegram message about DB migration start
        uses: appleboy/telegram-action@master
        with:
          to: ${{ vars.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: |
            🛢️ DB Migration: *PROD -> DEV* 
            ------------------------------
            ✨ *STARTED*

  DB-Backup:
    runs-on: self-hosted
    needs: TG-Start-Notification
    steps:
    - name: Make DB dump on SRC host
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.SRC_HOST_IP }}
        username: ${{ vars.SRC_HOST_USER }}
        key: ${{ secrets.SRC_HOST_SSH_KEY }}
        port: ${{ vars.SRC_HOST_PORT }}
        script: |
          bash <<EOF
          echo "Doing DB dump..."
          export MYSQL_PWD="${{ secrets.SRC_DB_PASS }}"
          mysqldump -u "${{ secrets.SRC_DB_USER }}" "${{ secrets.SRC_DB_NAME }}" > /home/${{ vars.SRC_HOST_USER }}/test_db_dump.sql
          EOF

  DB-Copy:
    runs-on: self-hosted
    needs: DB-Backup
    steps:
    - name: Copy DB dump to DST host
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.SRC_HOST_IP }}
        username: ${{ vars.SRC_HOST_USER }}
        key: ${{ secrets.SRC_HOST_SSH_KEY }}
        port: ${{ vars.SRC_HOST_PORT }}
        script: |
          bash <<EOF
          echo "Doing SCP to DEV server..."
          scp -o StrictHostKeyChecking=no /home/${{ vars.SRC_HOST_USER }}/test_db_dump.sql dev@${{ vars.DST_HOST_IP }}:/home/dev/
          EOF

    - name: Verify DB dump checksum
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.SRC_HOST_IP }}
        username: ${{ vars.SRC_HOST_USER }}
        key: ${{ secrets.SRC_HOST_SSH_KEY }}
        port: ${{ vars.SRC_HOST_PORT }}
        script: |
          bash <<EOF
          echo "Getting hash of the DB Dump on SRC..."
          prod_hash=$(md5sum /home/${{ vars.SRC_HOST_USER }}/test_db_dump.sql | awk '{ print $1 }')
          echo "SRC: $prod_hash"
          
          echo "Getting hash of the DB Dump on Dev..."
          dev_hash=$(ssh dev@${{ vars.DST_HOST_IP }} -o StrictHostKeyChecking=no "md5sum /home/dev/test_db_dump.sql | awk '{ print \$1 }'")
          echo "DST: $dev_hash"
          
          echo "Comparing SRC and DST hashes..."
          if [ "$prod_hash" == "$dev_hash" ]; then
            echo "Hashes match: OK"
          else
            echo "Hashes do not match!!!"
            exit 1
          fi
          EOF

  DB-Restore:
    runs-on: self-hosted
    needs: DB-Copy
    steps:
    - name: Restore DST DB from dump
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.DST_HOST_IP }}
        username: ${{ vars.DST_HOST_USER }}
        key: ${{ secrets.DST_HOST_SSH_KEY }}
        port: ${{ vars.DST_HOST_PORT }}
        script: |
          bash <<EOF
          echo "Doing DB restore..."
          export MYSQL_PWD="${{ secrets.DST_DB_PASS }}"
          mysql -u "${{ secrets.DST_DB_USER }}" ${{ secrets.DST_DB_NAME }} < /home/dev/test_db_dump.sql
          EOF   

  TG-Finish-Notification:
    runs-on: self-hosted
    needs: [ DB-Backup, DB-Copy, DB-Restore ]
    if: always()
    steps:
      - name: Set message
        id: set-message
        run: |
          backup_status="⚪"
          copy_status="⚪"
          restore_status="⚪"
          
          if [ "${{ needs.DB-Backup.result }}" == "success" ]; then
            backup_status="🟢"
          elif [ "${{ needs.DB-Backup.result }}" == "failure" ]; then
            backup_status="🔴"
          fi
          
          if [ "${{ needs.DB-Copy.result }}" == "success" ]; then
            copy_status="🟢"
          elif [ "${{ needs.DB-Copy.result }}" == "failure" ]; then
            copy_status="🔴"
          fi
          
          if [ "${{ needs.DB-Restore.result }}" == "success" ]; then
            restore_status="🟢"
          elif [ "${{ needs.DB-Restore.result }}" == "failure" ]; then
            restore_status="🔴"
          fi
          
          message="🛢️ DB Migration: *PROD -> DEV FINISHED*"
          message="$message<br>------------------------"
          message="$message<br>$backup_status DB-Backup"
          message="$message<br>$copy_status DB-Copy"
          message="$message<br>$restore_status DB-Restore"
          
          echo "::set-output name=message::$message"

      - name: Send telegram message about DB migration finish
        uses: appleboy/telegram-action@master
        with:
          to: ${{ vars.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          format: markdown
          message: ${{ steps.set-message.outputs.message }}